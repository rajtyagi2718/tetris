use cur, nex, and average all nex_nex pieces

features:
  holes: store bits set
  get heights: optimization?

lock_game
  lock_piece from agent
  search only terminal states

train_game
  check enqueue, lock_act, lock_search(no board reset)
  
score_game
  
agent
  playagent
    randomplayagent
    searchplayagent
  lockagent
    randomlockagent
    searchlockagent

game
  playgame
  lockgame

search
  playsearch
  locksearch

env
  locksearchenv



TODO
  competition
  stats
    optimize play for nes ntsc scoring
    levels: 18 ... 28
    line clears per level: 130 140 ... 190 200 200 200 200
    points: 40, 100, 300, 1200 * (level + 1) 
    total lines: 1920
    total pieces: 5000 > (1920*10+200) / 4
  train
    search 
      features vector input
      no actions, no afterstates, no backtrack
      only terminal states
    game
      stats
        level
        lines
        transition
        pieces
      score
      piece_queue
  capture
    game
      piece, actions saved 
    graphics game
      colors
      next piece 

Q Learning
  board, cur_piece, nex_piece -> 
  lines, nex_board, nex_piece, nex_nex_piece ->
  features ->
  values

sample_game 
  piece_ids = [char, ... ]
  cur_boards = [uint256_t, ...]
  nex_boards [[uint256_t, ...], ...]
  q(nex_board, weights) -> reward
    lines, after_state -> features -> value

piece_ids, weights, e-greedy -> cur_boards, nex_boards, lines
     


  game snapshots
  make
  const auto &
  gtests
  features bits
  search profile



g++ -std=c++17 -c ../src/searchgame.cpp -o ../build/searchgame.o && g++ -std=c++17 -c ../src/agent.cpp -o ../build/agent.o && g++ -std=c++17 -c ../src/game.cpp -o ../build/game.o

g++ -std=c++17 main.o ../build/exception.o ../build/bitboard.o ../build/board.o ../build/features.o ../build/piece.o ../build/agent.o ../build/game.o ../build/searchgame.o gametest.cpp -lgtest -lgtest_main -pthread -o gametest && ./gametest

g++ -std=c++17 -c ../src/searchgame.cpp -o ../build/searchgame.o && g++ -std=c++17 main.o ../build/exception.o ../build/bitboard.o ../build/board.o ../build/features.o ../build/piece.o ../build/agent.o ../build/game.o ../build/searchgame.o searchgametest.cpp -lgtest -lgtest_main -pthread -o searchgametest && ./searchgametest

g++ -std=c++17 ../build/exception.o ../build/bitboard.o ../build/board.o ../build/features.o ../build/piece.o ../build/agent.o ../build/game.o ../build/graphics.o ../build/graphicsgame.o ../build/searchgame.o graphicsgametest.cpp -lsfml-graphics -lsfml-window -lsfml-system -lgtest -lgtest_main -pthread -o graphicstest && ./graphicstest

g++ -std=c++17 main.o ../build/exception.o exceptiontest.o ../build/bitboard.o bitboardtest.o ../build/board.o boardtest.o ../build/piece.o piecetest.o ../build/agent.o agenttest.o ../build/game.o gametest.o ../build/graphics.o ../build/graphicsgame.o graphicsgametest.o ../build/searchgame.o searchgametest.o -lsfml-graphics -lsfml-window -lsfml-system -lgtest -lgtest_main -pthread -o alltests

  

TODO Search.cache
  path to best end state
    < 4*20*10 states
    filter disjoint from board and !fall
    sort by reward
      lines cleared
      board state
    reverse paths to start
    choose best
      shortest path
      least moves

reacheable piece end states

  


create_graph: bitboard.o board.o piece.o grapher.o
	g++ -std=c++17 build/bitboard.o build/board.o build/piece.o build/grapher.o src/create_graph.cpp -o build/create_graph

bitboard.o:
	g++ -std=c++17 -c src/bitboard.cpp -o build/bitboard.o

board.o:
	g++ -std=c++17 -c src/board.cpp -o build/board.o

piece.o:
	g++ -std=c++17 -c src/piece.cpp -o build/piece.o

grapher.o:
	g++ -std=c++17 -c src/grapher.cpp -o build/grapher.o

build/create_graph
